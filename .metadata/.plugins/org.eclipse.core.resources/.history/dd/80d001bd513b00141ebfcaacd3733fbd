import helper
from constants import nodes, neighborSetLen, lowLeafSetLen, \
	upLeafSetLen

'''A : Existing node
...X : New node'''
from helper import isNodeAlive, getMinOrMaxLeaf, getMinLeaf, getMaxLeaf

def add_node(A, X):
	nodes.append(X)
	# Nothing to be done if it's the first node
	if(A == None):
		return
	
	routePath, Z = route(A, X)
	
	if(Z.nodeKey == X.nodeKey):
		print "node already present"
		return -1
	
	updateRoutingTable(A, X, routePath)
	updateNeighborSet(A, X)
	updateLeafSet(Z, X)
	
	# Sending state to other nodes
	updateOthers(X)
	
def updateRoutingTable(A, X, routePath):
	i = 0
	X.routingTable.append(A.routingTable[i])
	for B in routePath:
		X.routingTable.append(B.routingTable[+ +i])
	

def updateNeighborSet(A, X):
	X.neighborhoodSet.append(A)
	
	# getting n-1 neighbors from A
	for node in A.neighborhoodSet:
		i = 0
		if(i == neighborSetLen - 1):
			break
		X.neighborhoodSet.append(node)
		i += 1

def updateLeafSet(Z, X):
	# Taking leafSet from Z
	t_leafSet = Z.lowLeafSet + Z.upLeafSet
	for t_leaf in t_leafSet:
		if(len(X.lowLeafSet) < lowLeafSetLen and t_leaf.nodeKey < X.nodeKey):
				X.lowLeafSet.append(t_leaf)
		if(len(X.upLeafSet) < upLeafSetLen and t_leaf.nodeKey > X.nodeKey):
				X.upLeafSet.append(t_leaf)

def updateOthers(X):
	# updating neighbors of X with X
	for neighbor in X.neighborhoodSet:
		if(len(neighbor.neighborhoodSet) < neighborSetLen):
			neighbor.neighborhoodSet.append(X)

	# updating leafs of X with X	
	t_leafSet = X.lowLeafSet + X.upLeafSet
	for leaf in t_leafSet:
		if(len(leaf.lowLeafSet) < lowLeafSetLen and X.nodeKey < leaf.nodeKey):
				leaf.lowLeafSet.append(X)
		elif(len(leaf.upLeafSet) < upLeafSetLen and X.nodeKey > leaf.nodeKey):
				leaf.upLeafSet.append(X)
	
	# updating nodes in routing table with X
	prefixLen = 0
	for routeTableRow in X.routingTable:
		prefixLen += 1
		for N in routeTableRow:
			routeTableEntry = N.routingTable[prefixLen][int(X.nodeKey[prefixLen], 16)]
			if(not(isNodeAlive(routeTableEntry))):
				N.routingTable[prefixLen][int(X.nodeKey[prefixLen], 16)] = X

def route(A, X):
	routePath = []
	while(1):
		routePath.append(A)
		'''TO-DO:'''  # check if while condition needs to be changed
		
		# search in leafSet
		leafSet = A.lowLeafSet + A.upLeafSet
		if(getMinLeaf(A).nodeKey <= X.nodeKey >= getMaxLeaf(A).nodeKey):
			leafSet.append(X)  # Adding the currentNode in the leafSet...currentNode can be nearest
			nearestleaf = [leafSet, A] 
			return routePath, nearestleaf
		
		# search in routing table
		prefixLen = helper.shl(A.nodeKey, X.nodeKey)
		row = prefixLen
		col = int(X.nodeKey[prefixLen], 16)
		distFromA = helper.getDistance(A, X)
		routeTableEntry = A.routingTable[row][col]
		if(isNodeAlive(routeTableEntry)):
			A = routeTableEntry
			continue  # forwarded to the closer node
		else:
			# repair the routingTableEntry
			repairRouteTableEntry(A, row, col)
			# Send to numerically closer node			
			t_list = A.leafSet + A.neighborhoodSet + A.routingTable[row]
			for node in t_list:
				t_prefixLen = helper.shl(node, X.nodeKey)
				t_dist = helper.getDistance(node, X)
				if(t_prefixLen >= prefixLen and t_dist < distFromA):
					A = nodes
					continue
				
		return routePath, A
	
def repairRouteTableEntry(A, row, col):
	# asking nodes in the same row for replacement node
	for r in range(row, len(A.routingTable)):
		for c in range(0, len(A.routingTable[r])):
			t_node = A.routingTable[r][c]
			if(c != col and isNodeAlive(t_node)):
				t_node_routeTableEntry = t_node.routingTable[row][col]
				if(isNodeAlive(t_node_routeTableEntry)):
					A.routingTable[row][col] = t_node_routeTableEntry
					return

# Iterating over all the nodes in the network & repairing the failed entry 
def nodeDeleted(X):
	for node in nodes:
		# Repair leaf set
		if X in node.upLeafSet:
			node.upLeafSet.remove(X)
			temp = getMaxLeaf(node)
			
			t_leafSet = temp.lowLeafSet + temp.upLeafSet
			for leaf in t_leafSet:
				if leaf.nodeKey > node.nodeKey:
					node.upLeafSet.append(leaf)
					break

		elif X in node.downLeafSet:
			node.downLeafSet.remove(X)
			temp = getMinLeaf(node)
			
			t_leafSet = temp.lowLeafSet + temp.upLeafSet
			for leaf in t_leafSet:
				if leaf.nodeKey < node.nodeKey:
					node.downLeafSet.append(leaf)
					break