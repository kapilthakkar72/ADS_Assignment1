import helper
from constants import nodes, neighborSetLen, leafSetLen

'''A : Existing node
...X : New node'''
from helper import isNodeAlive

def add_node(A, X):
	# Nothing to be done if it's the first node
	if(A == None):
		nodes.append(X)
		return
	
	routePath, Z = route(A, X)
	
	if(Z.nodeKey == X.nodeKey):
		print "node already present"
		return -1
	
	updateRoutingTable(A, X, routePath)
	updateNeighborSet(A, X)
	updateLeafSet(Z, X)
	
	nodes.append(X)
	updateOthers(A, X, routePath)
	
def updateRoutingTable(A, X, routePath):
	i = 0
	X.routingTable.append(A.routingTable[i])
	for B in routePath:
		X.routingTable.append(B.routingTable[+ +i])
	

def updateNeighborSet(A, X):
	X.neighborhoodSet.append(A)
	
	#getting n-1 neighbors from A
	for node in A.neighborhoodSet:
		i = 0
		if(i == neighborSetLen - 1):
			break
		X.neighborhoodSet.append(node)
		i += 1

def updateLeafSet(Z, X):
	#Adding the node itself in the leafSet
	X.leafSet.append(X)
	
	for leaf in Z.leafSet:
		l = 0
		u= 0
		if(leaf.nodeKey < X.nodeKey):
	
def updateOthers(A, X, Z, routePath):
	if(len(A.neighborhoodSet) < neighborSetLen):
		A.neighborhoodSet.append(X)
		
	if(len(Z.leafSet) < leafSetLen):
		'''TO-DO: do something'''
		
	'''TO-DO: check if below is required...take example'''
	'''for N in routePath:
		prefixLen = helper.shl(N.nodeKey, X.nodeKey)
		routeTableEntry = N.routingTable[prefixLen][int(X.nodeKey[prefixLen], 16)]
		if(not(isNodeAlive(routeTableEntry))):
			N.routingTable[prefixLen][int(X.nodeKey[prefixLen], 16)] = X
	'''
	

def getMinDistNode(nodeSet, X):
	minDist = 100000
	nearestNode = None
	for node in nodeSet:
		dist = int(X.nodeKey) - int(node.nodeKey)
		if (minDist > dist):
			minDist = dist
			nearestNode = node
	return nearestNode

def route(A, X):
	tempNode = A;
	routePath = []
	while(tempNode.nodeKey != X.nodeKey):
		'''TO-DO:'''  # need to change/addSome in the while condition
		
		# search in leafSet
		if(A.leafSet[0].nodeKey <= X.nodeKey >= A.leafSet[-1].nodeKey):
			nearestLeaf = getMinDistNode(A.leafSet, X)
			return routePath, nearestLeaf
		
		# search in routing table
		prefixLen = helper.shl(A.nodeKey, X.nodeKey)
		routeTableEntry = tempNode.routingTable[prefixLen][int(X.nodeKey[prefixLen], 16)]
		if(isNodeAlive(routeTableEntry)):
			routePath.append(tempNode)
			tempNode = routeTableEntry
			continue  # forwarded to the closer node
		else:
			'''TO-DO: repair the routingTableEntry'''
			tempNode = getMinDistNode(A.neighborhoodSet + tempNode.routingTable[prefixLen])
		
		return routePath, tempNode
	
