import helper
from constants import nodes, neighborSetLen, lowLeafSetLen, \
	upLeafSetLen
from helper import isNodeAlive, isEligibleUpLeaf, isEligibleDownLeaf, \
	getRelativeDistance, getNumericDistance, shl, getMinLeaf, getMaxLeaf, \
	getMinDistNode, getClosestNode

'''A : Existing node
...X : New node'''


def add_node(X):
	# Getting the neighbors
	A = helper.getClosestNode(nodes, X)
	
	if(A and A.nodeKey == X.nodeKey):
		print ("node already present-- " + str(X))
		return -1

	
	# Nothing to be done if it's the first node
	if(A == None):
		nodes.append(X)
		addMeInRoutingTable(X)
		return

	routePath = routeForAdd(A, X)
	X.routePath = routePath

	Z = routePath[-1]
	
	nodes.append(X)
	
	updateRoutingTable(A, X, routePath)
	updateNeighborSet(A, X)
	updateLeafSet(Z, X)
	
	# Sending state to other nodes
	updateOthers(X)
	addMeInRoutingTable(X)
	
def addMeInRoutingTable(X):
	i = -1
	for routeTableRow in X.routingTable:
		i += 1
		j = -1
		for routeTableEntry in routeTableRow:
			j += 1
			if(j == int(X.nodeKey[i], 16)):
				X.routingTable[i][j] = X
	

def routeForAdd(A, X):	
		
	i = -1
	routePath = []
	
	while(1):
		i += 1
		routePath.append(A)
			
		# returning if found the node
		if A.nodeKey == X.nodeKey:
			return routePath
			

		# search in routing table
		row = i
		col = int(X.nodeKey[i], 16)
		routeTableEntry = A.routingTable[row][col]
		
		if not(isNodeAlive(routeTableEntry)):
			return routePath
		
		A = routeTableEntry
			
	return routePath
	
	
def updateRoutingTable(A, X, routePath):
	i = -1
	for B in routePath:
		i += 1
		j = -1
		for t_node in B.routingTable[i]:
			j += 1
			if j == int(X.nodeKey[i], 16):
				X.routingTable[i][j] = X
			else:
				X.routingTable[i][j] = t_node
	

def updateNeighborSet(A, X):
	X.neighborhoodSet.append(A)
	
	for node in A.neighborhoodSet:
		if len(X.neighborhoodSet) == neighborSetLen:
			break
		X.neighborhoodSet.append(node)


def updateLeafSet(Z, X):
	# Adding Z to the leafSet
	if(isEligibleUpLeaf(Z, X)):
		X.upLeafSet.append(Z)
	elif(isEligibleDownLeaf(Z, X)):
		X.downLeafSet.append(Z)
		
	# Taking leafSet from Z
	t_leafSet = Z.downLeafSet + Z.upLeafSet
	for t_leaf in t_leafSet:
		if(len(X.downLeafSet) < lowLeafSetLen and isEligibleDownLeaf(t_leaf, X)):
				X.downLeafSet.append(t_leaf)
		if(len(X.upLeafSet) < upLeafSetLen and isEligibleUpLeaf(t_leaf, X)):
				X.upLeafSet.append(t_leaf)

def updateOthers(X):
	t_nodes = X.neighborhoodSet + X.upLeafSet + X.downLeafSet
	
	for routeTableRow in X.routingTable:
		for routeTableEntry in routeTableRow:
			if(isNodeAlive(routeTableEntry)):
				t_nodes.append(routeTableEntry)
				
	t_nodes = list(set(t_nodes))
	t_nodes.remove(X)

	# Updating neighborhoodSet of others
	for otherNode in t_nodes:
		# adding X into the neighborhoodSet of otherNode if not enough neighbors
		if(len(otherNode.neighborhoodSet) < neighborSetLen):
			otherNode.neighborhoodSet.append(X)
			break
		
		# replacing neighbor of otherNode with X if more closer
		for neighborOfOtherNode in otherNode.neighborhoodSet:
			if(getRelativeDistance(neighborOfOtherNode, otherNode) > getRelativeDistance(X, otherNode)):
				otherNode.neighborhoodSet.remove(neighborOfOtherNode)
				otherNode.neighborhoodSet.append(X)
				break


	# updating leafs of others
	for otherNode in t_nodes:
		# adding X into the leafSet of leaf if not enough leafs
		if(len(otherNode.downLeafSet) < lowLeafSetLen and isEligibleDownLeaf(X, otherNode)):
				otherNode.downLeafSet.append(X)
				break
		elif(len(otherNode.upLeafSet) < upLeafSetLen and isEligibleUpLeaf(X, otherNode)):
				otherNode.upLeafSet.append(X)
				break
		
		# replacing leaf of otherNode with X if more numerically closer
		t_leafOfOtherNodeSet = otherNode.downLeafSet + otherNode.upLeafSet
		for leafOfOtherNode in t_leafOfOtherNodeSet:
			prefixLenWithX = shl(X.nodeKey, otherNode.nodeKey)
			prefixLenWithLeaf = shl(leafOfOtherNode.nodeKey, otherNode.nodeKey)
			
			if (prefixLenWithX >= prefixLenWithLeaf):  # updating only if more or equal prefixLen			
				if leafOfOtherNode in otherNode.downLeafSet and X.nodeKey < otherNode.nodeKey:
					if(getNumericDistance(leafOfOtherNode, otherNode) > getNumericDistance(X, otherNode)):
							otherNode.downLeafSet.remove(leafOfOtherNode)
							otherNode.downLeafSet.append(X)
							break
						
				if leafOfOtherNode in otherNode.upLeafSet and X.nodeKey > otherNode.nodeKey:
					if(getNumericDistance(leafOfOtherNode, otherNode) > getNumericDistance(X, otherNode)):
						otherNode.upLeafSet.remove(leafOfOtherNode)
						otherNode.upLeafSet.append(X)
						break


	# updating nodes in routing table with X
	for otherNode in t_nodes:
		prefixLen = helper.shl(otherNode.nodeKey, X.nodeKey)
		row = prefixLen
		col = int(X.nodeKey[prefixLen], 16)
		routeTableEntry = otherNode.routingTable[row][col]
		if not(isNodeAlive(routeTableEntry)):
			otherNode.routingTable[row][col] = X



def route(A, X):	
	routePath = []
	while(1):
		
		routePath.append(A)
		prefixLen = helper.shl(A.nodeKey, X.nodeKey)
		
		if len(routePath) > 20:
			print ("route path too much")
		
		# returning if found the node
		if A.nodeKey == X.nodeKey:
			return routePath
		
		# search in leafSet
		leafSet = A.downLeafSet + A.upLeafSet
		if leafSet:  # checking if the leafSet is not empty
			
			minLeaf = getMinLeaf(A)
			maxLeaf = getMaxLeaf(A)
			
			if minLeaf and maxLeaf:
				
				if(minLeaf.nodeKey <= X.nodeKey <= maxLeaf.nodeKey):
					t_leafSet = []
					
					for leaf in leafSet:
						t_prefixLen = helper.shl(leaf.nodeKey, X.nodeKey)
						if t_prefixLen >= prefixLen:
							t_leafSet.append(leaf)
							
					nearestleaf = getMinDistNode(t_leafSet, X)
					
					# no need to append the routePath if nearestLeaf is the current node
					'''if A.nodeKey != nearestleaf.nodeKey:
						routePath.append(nearestleaf)
						
					return routePath'''
					
					A = nearestleaf
					continue

		# search in routing table
		row = prefixLen
		col = int(X.nodeKey[prefixLen], 16)
		routeTableEntry = A.routingTable[row][col]
		if(isNodeAlive(routeTableEntry)):
			A = routeTableEntry
			continue  # forwarded to the closer node
		else:
			'''# repair the routingTableEntry'''
			if(routeTableEntry):  # Repairing only if it is not null (i.e it is not active)
				repairRouteTableEntry(A, row, col)  # commented here since handled in the deletion'''
			
			# Send to numerically closer node
			t_list = A.downLeafSet + A.upLeafSet + A.neighborhoodSet
			
			for k in range(row, len(A.routingTable)):
				for rowEntry in A.routingTable[k]:
					if(isNodeAlive(rowEntry)):
						t_list.append(rowEntry)
			
			t_list = list(set(t_list))
			t_list.remove(A)
			t_t_list = []
			
			for node in t_list:  # Getting all nodes with >= prefixLen than the current node
				t_prefixLen = helper.shl(node.nodeKey, X.nodeKey)
				if t_prefixLen >= prefixLen:
						t_t_list.append(node)
			
			nearestNode = getMinDistNode(t_t_list, X)
			distFromA = helper.getNumericDistance(A, X)
			t_dist = helper.getNumericDistance(nearestNode, X)
			
			if(t_dist < distFromA):
				A = nearestNode
				continue
			else:
				# print ("----No more routing possible")
				return routePath			
		
	return routePath


def repairRouteTableEntry(A, row, col):
	# asking nodes in the same row for replacement node
	for r in range(row, len(A.routingTable)):
		for c in range(0, len(A.routingTable[r])):
			t_node = A.routingTable[r][c]
			if(c != col and isNodeAlive(t_node)):
				t_node_routeTableEntry = t_node.routingTable[row][col]
				if(isNodeAlive(t_node_routeTableEntry)):
					A.routingTable[row][col] = t_node_routeTableEntry
					return

				
def silentDelete(X):
	X.isNodeActive = False
	
	
# Iterating over all the nodes in the network & repairing the failed entry 
def noisyDelete(X):
	X.isNodeActive = False
	affectedCount = 0
	
	for node in nodes:
		
		if isNodeAlive((node): #no need to repair the dead nodes
			continue
		
		affectedFlag = False
		
		# Repair leaf set
		if X in node.upLeafSet:
			affectedFlag = True
			node.upLeafSet.remove(X)
			temp = getMaxLeaf(node)
			
			if temp:
				t_leafSet = temp.downLeafSet + temp.upLeafSet
				for leaf in t_leafSet:
					if isEligibleUpLeaf(leaf, node) and leaf not in node.upLeafSet and isNodeAlive(leaf):
						node.upLeafSet.append(leaf)
						break

		elif X in node.downLeafSet:
			affectedFlag = True
			node.downLeafSet.remove(X)
			temp = getMinLeaf(node)
			
			if temp:
				t_leafSet = temp.downLeafSet + temp.upLeafSet
				for leaf in t_leafSet:
					if isEligibleDownLeaf(leaf, node) and leaf not in node.downLeafSet and isNodeAlive(leaf):
						node.downLeafSet.append(leaf)
						break
				
		# Repair neighborhood set
		if X in node.neighborhoodSet:
			affectedFlag = True
			node.neighborhoodSet.remove(X)
			t_neighborOfNeighborList = []
			# getting all the neighbor of neighbors
			for neighbor in node.neighborhoodSet:
				if(isNodeAlive(neighbor)):
					for neighborOfneighbor in neighbor.neighborhoodSet:
						if(isNodeAlive(neighborOfneighbor)):
							t_neighborOfNeighborList.append(neighborOfneighbor)
			
			t_neighborOfNeighborList = list(set(t_neighborOfNeighborList))
			while t_neighborOfNeighborList:
				closestNeighborOfNeighbor = getClosestNode(t_neighborOfNeighborList, node)
				
				try:
					if(closestNeighborOfNeighbor.nodeKey == node.nodeKey):
						t_neighborOfNeighborList.remove(closestNeighborOfNeighbor)
						continue
				
					node.neighborhoodSet.append(closestNeighborOfNeighbor)
					break
				except AttributeError:
					print ("Error")
		
		# Repair routing table
		for routeTableRow in node.routingTable:
			try:
				if X in routeTableRow:
					affectedFlag = True
					row = node.routingTable.index(routeTableRow)
					col = routeTableRow.index(X)
					repairRouteTableEntry(node, row, col)
					break
			except ValueError:
				continue
		
		if affectedFlag:
			affectedCount += 1
		
	return affectedCount
