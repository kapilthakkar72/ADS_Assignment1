import random
import os.path
from math import sqrt

def generateIpAddress():
	return int(ipPart() + ipPart() + ipPart() + ipPart())
	
	
def ipPart():
	return str(random.randint(0, 255))

def shl(k1, k2):
	tempList = [str(k1), str(k2)]
	return len(os.path.commonprefix(tempList))

def hexToInt(hexVal):
	return int(hexVal, 16)

def isNodeAlive(N):
	return N != None and N.isNodeActive

def getNumericDistance(A1, A2):
	return abs(int(A1.nodeKey) - int(A2.nodeKey))

def getRelativeDistance(A1, A2):
	yDiff = A1.coordinates[1] - A2.coordinates[1]
	xDiff = A1.coordinates[0] - A2.coordinates[0]
	tmpVar = abs(yDiff**2 - xDiff**2)
	return sqrt(tmpVar)

#Used to find the neighbors
def getClosestNode(nodeSet, X):
	minDist = 100000
	closestNode = None
	for node in nodeSet:
		if(isNodeAlive(node)):
			dist = getNumericDistance(X, node)
			if (minDist > dist):
				minDist = dist
				closestNode = node
	return closestNode
		
# returns the numerically closest node
def getMinDistNode(nodeSet, X):
	minDist = 100000
	nearestNode = None
	for node in nodeSet:
		if(isNodeAlive(node)):
			dist = getNumericDistance(X, node)
			if (minDist > dist):
				minDist = dist
				nearestNode = node
	return nearestNode

def getMaxDistNode(nodeSet, X):
	maxDist = 0
	farthestNode = None
	for node in nodeSet:
		if(isNodeAlive(node)):
			dist = getNumericDistance(X, node)
			if (maxDist < dist):
				maxDist = dist
				farthestNode = node
	return farthestNode

def getMinLeaf(A):
	return getMaxDistNode(A.lowLeafSet, A)  # minLeaf will have the max distance

def getMaxLeaf(A):
	return getMaxDistNode(A.upLeafSet, A)  # maxLeaf will have the max distance 
